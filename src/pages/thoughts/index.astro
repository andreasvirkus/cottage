---
import Base from '../../layouts/Base.astro'
import { getCollection } from 'astro:content'
import FormattedDate from '../../components/FormattedDate.astro'
import { getConicGradient } from '../../utils/conic-art'

const tags = new Set()
let posts = ((await getCollection('thoughts')) || [])
  .sort((a, b) => b.data.pubDate.valueOf() - a.data.pubDate.valueOf())
  .map((post) => {
    post.data.tags?.forEach((tag) => tags.add(tag))
    return {
      ...post,
      // Generate custom gradient for each post, seeded by slug
      data: {
        ...post.data,
        heroImage: getConicGradient(post.slug || ''),
      },
    }
  })
---

<Base>
  <h1>thoughts</h1>
  <p>
    Here you can read 'bout my questionable opinions on anything dev-related or just nice tips/hacks I enjoy having in
    my utility belt.
  </p>
  <p>
    <strong>PS!</strong>
    <em
      >I've yet to figure out what I want to do with images, so for now enjoy these randomly generated conic gradients.</em
    >
  </p>
  <hr />

  <!-- TODO: Show tags once we add post filtering -->
  <div class="tags" style="display: none">
    {
      Array.from(tags).map((tag) => (
        <label>
          {tag}
          <input type="checkbox" />
        </label>
      ))
    }
  </div>

  <section>
    <ul>
      {
        posts
          // .filter((post) => selectedTags.includes(post.data.tags?.join()))
          .map((post) => (
            <li>
              <a href={`/thoughts/${post.slug}/`}>
                <div class="gradient" style={`--hero-gradient: ${post.data.heroImage}`} />
                <h4 class="title">{post.data.title}</h4>
                <p class="date">
                  <FormattedDate date={post.data.pubDate} />
                </p>
              </a>
            </li>
          ))
      }
    </ul>
  </section>
</Base>

<style>
  ul {
    display: flex;
    flex-wrap: wrap;
    gap: 2rem;
    list-style-type: none;
    margin: 0;
    padding: 0;
    margin-top: 1em;
  }
  li {
    width: calc(50% - 1rem);
    border-radius: 12px;
  }

  a {
    display: block;
    border: none;
    box-shadow: none;
  }
  a:hover {
    box-shadow: none;
    background: none;
    border: none;
  }
  a:hover .gradient {
    opacity: 0.4;
    box-shadow: var(--box-shadow);
  }
  li * {
    transition: 0.2s ease;
  }
  li:first-child {
    width: 100%;
    margin-bottom: 1rem;
    text-align: center;
  }
  li:first-child .gradient {
    width: 100%;
  }
  li:first-child .title {
    font-size: 2.369rem;
  }
  .gradient {
    margin-bottom: 0.5rem;
    border-radius: 12px;
    background-image: var(--hero-gradient);
    height: 132px;
  }
  .title {
    margin: 0;
    line-height: 1;
  }
  .date {
    margin: 0;
    color: rgb(var(--gray));
    font-size: 0.8em;
  }
  a:hover h4,
  a:hover .date {
    color: var(--accent);
  }

  .tags {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5em;
    margin-bottom: 2em;
  }

  label {
    border-radius: 4px;
    background-color: var(--code-background-color);
    padding: 0.5em;
    font-family: var(--font-mono);
    font-size: 0.8em;
    cursor: pointer;
  }

  /* TODO: Hide once there's a nice way to style checked state */
  label input {
    cursor: pointer;
    /* display: none; */
  }

  @media (max-width: 720px) {
    ul {
      gap: 0.5em;
    }
    li {
      width: 100%;
      text-align: center;
      margin-bottom: 1em;
    }
    li:first-child {
      margin-bottom: 0;
    }
    li:first-child .title {
      font-size: 1.563em;
    }

    .gradient {
      height: 60px;
    }
  }
</style>
